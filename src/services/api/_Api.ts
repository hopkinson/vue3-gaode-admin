/**
 * 便民车监管平台
 * unknown
 *
 * OpenAPI spec version: last
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ajax, { AjaxPromise } from '@ajax'
import * as models from '../model/models'

/* tslint:disable:no-unused-variable member-ordering object-literal-shorthand */

/**
 * @description apiV1SettingRouteIdPut参数
 * @property `id` 行驶路线ID
 */
export interface ParamsapiV1SettingRouteIdPut {
  // pathParams
  /**
   * 行驶路线ID
   */
  id: string
}
/**
 */
export type ParamsBodyapiV1SettingRouteIdPut = models.ApiV1SettingRouteIdBody
/**
 * @description routeCarCarIdGet参数
 * @property `carId`
 */
export interface ParamsrouteCarCarIdGet {
  // pathParams
  /**
   *
   */
  carId: string
}
/**
 */
export type ParamsBodysettingCarRoutePut = Array<string>
/**
 */
export type ParamsBodysettingFenceCarsDelete = Array<
  models.SettingFenceCarsBody
>
/**
 */
export type ParamsBodysettingFenceCarsPut = Array<models.SettingFenceCarsBody>
/**
 * @description settingFenceIdDelete参数
 * @property `id` 电子围栏ID
 */
export interface ParamssettingFenceIdDelete {
  // pathParams
  /**
   * 电子围栏ID
   */
  id: string
}
/**
 */
export type ParamsBodysettingFenceIdDelete = any
/**
 * @description settingFenceIdPut参数
 * @property `id` 电子围栏ID
 */
export interface ParamssettingFenceIdPut {
  // pathParams
  /**
   * 电子围栏ID
   */
  id: string
}
/**
 */
export type ParamsBodysettingFenceIdPut = models.SettingFenceIdBody
/**
 */
export type ParamsBodysettingFencePost = models.SettingFenceBody
/**
 */
export type ParamsBodysettingFenceRegionsPost = Array<string>
/**
 * @description settingRouteIdCarsDelete参数
 * @property `id` 行驶路线ID
 */
export interface ParamssettingRouteIdCarsDelete {
  // pathParams
  /**
   * 行驶路线ID
   */
  id: string
}
/**
 */
export type ParamsBodysettingRouteIdCarsDelete = Array<string>
/**
 * @description settingRouteIdDelete参数
 * @property `id` 行驶路线ID
 */
export interface ParamssettingRouteIdDelete {
  // pathParams
  /**
   * 行驶路线ID
   */
  id: string
}
/**
 */
export type ParamsBodysettingRouteIdDelete = any
/**
 */
export type ParamsBodysettingRoutePost = models.SettingRouteBody
export class _Api {
  protected $basePath = '/api/v1'.replace(/\/$/, '')

  public constructor(basePath?: string) {
    if (basePath !== undefined) {
      this.$basePath = basePath.replace(/\/$/, '')
    }
  }

  /**
   *
   * @summary 更新行驶路线
   * @param params ParamsapiV1SettingRouteIdPut
   * @param data: ParamsBodyapiV1SettingRouteIdPut
   * @returns models.ApiV1SettingRouteId
   */
  public apiV1SettingRouteIdPut = (
    params: ParamsapiV1SettingRouteIdPut,
    data: ParamsBodyapiV1SettingRouteIdPut
  ): AjaxPromise<models.ApiV1SettingRouteId> => {
    const path = '/api/v1/setting/route/{id}'
    const url =
      this.$basePath +
      path.replace(/\{([^}]+)\}/g, (all, param) =>
        param in params ? params[param] : param
      )
    const p: any = {}
    ajax.check(params.id, 'id')
    p.data = data
    return ajax.ajax(
      {
        method: 'PUT',
        url,
        ...p
      },
      path,
      this.$basePath
    )
  }
  /**
   * 
   * @summary 返回指定车辆的预设行驶路线
   * @param params ParamsrouteCarCarIdGet
   
   * @returns models.RouteCarCarId
   */
  public routeCarCarIdGet = (
    params: ParamsrouteCarCarIdGet
  ): AjaxPromise<models.RouteCarCarId> => {
    const path = '/route/car/{carId}'
    const url =
      this.$basePath +
      path.replace(/\{([^}]+)\}/g, (all, param) =>
        param in params ? params[param] : param
      )
    const p: any = {}
    ajax.check(params.carId, 'carId')
    return ajax.ajax(
      {
        method: 'GET',
        url,
        ...p
      },
      path,
      this.$basePath
    )
  }
  /**
   * 
   * @summary 关联行驶路线和车辆
   
   * @param data: ParamsBodysettingCarRoutePut
   * @returns models.SettingFenceCars
   */
  public settingCarRoutePut = (
    data: ParamsBodysettingCarRoutePut
  ): AjaxPromise<models.SettingFenceCars> => {
    const path = '/setting/car-route'
    const url = this.$basePath + path
    const p: any = {}
    p.data = data
    return ajax.ajax(
      {
        method: 'PUT',
        url,
        ...p
      },
      path,
      this.$basePath
    )
  }
  /**
   * 
   * @summary 取消电子围栏关联车辆
   
   * @param data: ParamsBodysettingFenceCarsDelete
   * @returns models.SettingFenceCars
   */
  public settingFenceCarsDelete = (
    data: ParamsBodysettingFenceCarsDelete
  ): AjaxPromise<models.SettingFenceCars> => {
    const path = '/setting/fence/cars'
    const url = this.$basePath + path
    const p: any = {}
    p.data = data
    return ajax.ajax(
      {
        method: 'DELETE',
        url,
        ...p
      },
      path,
      this.$basePath
    )
  }
  /**
   * 
   * @summary 电子围栏关联车辆设置
   
   * @param data: ParamsBodysettingFenceCarsPut
   * @returns models.SettingFenceCars
   */
  public settingFenceCarsPut = (
    data: ParamsBodysettingFenceCarsPut
  ): AjaxPromise<models.SettingFenceCars> => {
    const path = '/setting/fence/cars'
    const url = this.$basePath + path
    const p: any = {}
    p.data = data
    return ajax.ajax(
      {
        method: 'PUT',
        url,
        ...p
      },
      path,
      this.$basePath
    )
  }
  /**
   *
   * @summary 删除电子围栏[作废]
   * @param params ParamssettingFenceIdDelete
   * @param data: ParamsBodysettingFenceIdDelete
   * @returns models.User2
   */
  public settingFenceIdDelete = (
    params: ParamssettingFenceIdDelete,
    data: ParamsBodysettingFenceIdDelete
  ): AjaxPromise<models.User2> => {
    const path = '/setting/fence/{id}'
    const url =
      this.$basePath +
      path.replace(/\{([^}]+)\}/g, (all, param) =>
        param in params ? params[param] : param
      )
    const p: any = {}
    ajax.check(params.id, 'id')
    p.data = data
    return ajax.ajax(
      {
        method: 'DELETE',
        url,
        ...p
      },
      path,
      this.$basePath
    )
  }
  /**
   *
   * @summary 更新电子围栏[作废]
   * @param params ParamssettingFenceIdPut
   * @param data: ParamsBodysettingFenceIdPut
   * @returns models.SettingFence
   */
  public settingFenceIdPut = (
    params: ParamssettingFenceIdPut,
    data: ParamsBodysettingFenceIdPut
  ): AjaxPromise<models.SettingFence> => {
    const path = '/setting/fence/{id}'
    const url =
      this.$basePath +
      path.replace(/\{([^}]+)\}/g, (all, param) =>
        param in params ? params[param] : param
      )
    const p: any = {}
    ajax.check(params.id, 'id')
    p.data = data
    return ajax.ajax(
      {
        method: 'PUT',
        url,
        ...p
      },
      path,
      this.$basePath
    )
  }
  /**
   * 
   * @summary 新增电子围栏[作废]
   
   * @param data: ParamsBodysettingFencePost
   * @returns models.SettingFence
   */
  public settingFencePost = (
    data: ParamsBodysettingFencePost
  ): AjaxPromise<models.SettingFence> => {
    const path = '/setting/fence'
    const url = this.$basePath + path
    const p: any = {}
    p.data = data
    return ajax.ajax(
      {
        method: 'POST',
        url,
        ...p
      },
      path,
      this.$basePath
    )
  }
  /**
   * 
   * @summary 返回指定区域(街道)的电子围栏[作废]
   
   * @param data: ParamsBodysettingFenceRegionsPost
   * @returns models.SettingFenceRegions
   */
  public settingFenceRegionsPost = (
    data: ParamsBodysettingFenceRegionsPost
  ): AjaxPromise<models.SettingFenceRegions> => {
    const path = '/setting/fence/regions'
    const url = this.$basePath + path
    const p: any = {}
    p.data = data
    return ajax.ajax(
      {
        method: 'POST',
        url,
        ...p
      },
      path,
      this.$basePath
    )
  }
  /**
   *
   * @summary 取消行驶路线关联车辆
   * @param params ParamssettingRouteIdCarsDelete
   * @param data: ParamsBodysettingRouteIdCarsDelete
   * @returns models.SettingFenceCars
   */
  public settingRouteIdCarsDelete = (
    params: ParamssettingRouteIdCarsDelete,
    data: ParamsBodysettingRouteIdCarsDelete
  ): AjaxPromise<models.SettingFenceCars> => {
    const path = '/setting/route/{id}/cars'
    const url =
      this.$basePath +
      path.replace(/\{([^}]+)\}/g, (all, param) =>
        param in params ? params[param] : param
      )
    const p: any = {}
    ajax.check(params.id, 'id')
    p.data = data
    return ajax.ajax(
      {
        method: 'DELETE',
        url,
        ...p
      },
      path,
      this.$basePath
    )
  }
  /**
   *
   * @summary 删除行驶路线
   * @param params ParamssettingRouteIdDelete
   * @param data: ParamsBodysettingRouteIdDelete
   * @returns models.User2
   */
  public settingRouteIdDelete = (
    params: ParamssettingRouteIdDelete,
    data: ParamsBodysettingRouteIdDelete
  ): AjaxPromise<models.User2> => {
    const path = '/setting/route/{id}'
    const url =
      this.$basePath +
      path.replace(/\{([^}]+)\}/g, (all, param) =>
        param in params ? params[param] : param
      )
    const p: any = {}
    ajax.check(params.id, 'id')
    p.data = data
    return ajax.ajax(
      {
        method: 'DELETE',
        url,
        ...p
      },
      path,
      this.$basePath
    )
  }
  /**
   * 
   * @summary 新增行驶路线
   
   * @param data: ParamsBodysettingRoutePost
   * @returns models.SettingRoute
   */
  public settingRoutePost = (
    data: ParamsBodysettingRoutePost
  ): AjaxPromise<models.SettingRoute> => {
    const path = '/setting/route'
    const url = this.$basePath + path
    const p: any = {}
    p.data = data
    return ajax.ajax(
      {
        method: 'POST',
        url,
        ...p
      },
      path,
      this.$basePath
    )
  }
}

export default new _Api()
